import React, { useEffect, useState, useRef } from "react";
import { useDispatch, useSelector } from "react-redux";
import { setClaimStatus, setPersonalInfo } from "./trackClaimSlice"; // Adjust path as per your structure
import { FaBars, FaPlus, FaMinus, FaDownload } from "react-icons/fa";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const TrackClaimStatus = () => {
  const dispatch = useDispatch();
  const claimStatus = useSelector((state) => state.trackClaim.claimStatus);
  const personalInfo = useSelector((state) => state.trackClaim.personalInfo);

  const [openSection, setOpenSection] = useState({
    online: false,
    transfer: false,
    auto: false,
  });

  const claimRefs = useRef({});

  useEffect(() => {
    // Fetch data once on mount
    fetch("/personalInfo.json")
      .then((res) => res.json())
      .then((data) => {
        dispatch(setClaimStatus(data.claimStatus || []));
        dispatch(setPersonalInfo(data.personalInfo || {}));
      })
      .catch((err) => {
        console.error("Error loading claim data:", err);
      });
  }, [dispatch]);

  const toggleSection = (section) => {
    setOpenSection((prev) => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  const generateSingleClaimPDF = (claim) => {
    const doc = new jsPDF();

    doc.setFont("Helvetica", "bold");
    doc.setFontSize(16);
    doc.text("Employee Provident Fund Organisation", 105, 20, { align: "center" });

    doc.setFontSize(12);
    doc.setFont("Helvetica", "normal");
    doc.text("Claim Status Report", 105, 30, { align: "center" });

    doc.line(20, 35, 190, 35);

    autoTable(doc, {
      startY: 40,
      head: [["Field", "Details"]],
      body: [
        ["Name", personalInfo.name || "-"],
        ["Mobile No", personalInfo.mobile || "-"],
        ["Email", personalInfo.email || "-"],
        ["Bank Account", personalInfo.bankAccount || "-"],
        ["IFSC Code", personalInfo.ifsc || "-"],
        ["Aadhaar No", personalInfo.aadhaar || "-"],
      ],
      theme: "grid",
      styles: { font: "helvetica", fontSize: 10 },
      headStyles: { fillColor: [41, 128, 185], textColor: 255 },
    });

    autoTable(doc, {
      startY: doc.lastAutoTable.finalY + 10,
      head: [["Field", "Details"]],
      body: [
        ["Tracking ID", claim.trackingId],
        ["Form Type", claim.formType],
        ["Submitted At Portal", claim.submittedAt],
        ["Sent To Field Office", claim.sentToFieldOffice],
        ["Current Status", claim.status],
      ],
      theme: "grid",
      styles: { font: "helvetica", fontSize: 10 },
      headStyles: { fillColor: [39, 174, 96], textColor: 255 },
    });

    doc.setFontSize(10);
    doc.text("Generated by EPFO Portal", 105, 290, { align: "center" });

    doc.save(`Claim_${claim.trackingId}.pdf`);
  };

  return (
    <div className="p-3 shadow-md mt-12 w-full">
      {/* Online Claim Section */}
      <div className="border border-gray-400 rounded-md shadow-lg mb-4">
        <div className="flex items-center justify-between bg-gray-100 px-4 py-2 rounded-t-md">
          <div className="flex items-center space-x-2">
            <FaBars />
            <span className="font-semibold text-blue-800">Online Claim Status</span>
          </div>
          <button
            type="button"
            onClick={() => toggleSection("online")}
            aria-label={openSection.online ? "Collapse Online Section" : "Expand Online Section"}
          >
            {openSection.online ? <FaMinus /> : <FaPlus />}
          </button>
        </div>

        {openSection.online && (
          <div className="overflow-x-auto p-4 bg-white">
            <table className="w-full text-sm text-left border border-gray-300">
              <thead className="bg-gray-100">
                <tr>
                  <th className="px-4 py-2 border">TRACKING ID</th>
                  <th className="px-4 py-2 border">FORM TYPE</th>
                  <th className="px-4 py-2 border">SUBMITTED AT PORTAL</th>
                  <th className="px-4 py-2 border">SENT TO FIELD OFFICE</th>
                  <th className="px-4 py-2 border">CURRENT STATUS</th>
                  <th className="px-4 py-2 border">VIEW PDF</th>
                </tr>
              </thead>
              <tbody>
                {claimStatus.length > 0 ? (
                  claimStatus.map((claim, index) => (
                    <tr key={index} className="bg-white" ref={(el) => (claimRefs.current[index] = el)}>
                      <td className="px-4 py-2 border">{claim.trackingId}</td>
                      <td className="px-4 py-2 border">{claim.formType}</td>
                      <td className="px-4 py-2 border">{claim.submittedAt}</td>
                      <td className="px-4 py-2 border">{claim.sentToFieldOffice}</td>
                      <td
                        className={`px-4 py-2 border ${
                          claim.status === "Claim Settled" ? "text-green-700" : "text-yellow-600"
                        }`}
                      >
                        {claim.status}
                      </td>
                      <td className="px-4 py-2 border text-center">
                        <button
                          type="button"
                          onClick={() => generateSingleClaimPDF(claim)}
                          title="Download PDF"
                          className="text-blue-600 text-lg hover:scale-110 transition-transform"
                        >
                          <FaDownload />
                        </button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="6" className="text-center p-4 text-gray-600">
                      No claim data available.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Transfer Claim Status */}
      <div className="border border-gray-400 rounded-md shadow-lg mb-4">
        <div className="flex items-center justify-between bg-gray-100 px-4 py-2 rounded-t-md">
          <div className="flex items-center space-x-2">
            <FaBars />
            <span className="font-semibold text-blue-800">Transfer Claim Status</span>
          </div>
          <button
            type="button"
            onClick={() => toggleSection("transfer")}
            aria-label={openSection.transfer ? "Collapse Transfer Section" : "Expand Transfer Section"}
          >
            {openSection.transfer ? <FaMinus /> : <FaPlus />}
          </button>
        </div>
        {openSection.transfer && (
          <div className="bg-red-100 text-red-700 p-4 border-t border-gray-300">
            <div className="flex items-center">
              <span className="mr-2">⚠</span> No Claim Details Found
            </div>
          </div>
        )}
      </div>

      {/* Auto Initiated Claim Cases */}
      <div className="border border-gray-400 rounded-md shadow-lg">
        <div className="flex items-center justify-between bg-gray-100 px-4 py-2 rounded-t-md">
          <div className="flex items-center space-x-2">
            <FaBars />
            <span className="font-semibold text-blue-800">Stop Auto Initiated Claim Cases</span>
          </div>
          <button
            type="button"
            onClick={() => toggleSection("auto")}
            aria-label={openSection.auto ? "Collapse Auto Section" : "Expand Auto Section"}
          >
            {openSection.auto ? <FaMinus /> : <FaPlus />}
          </button>
        </div>
        {openSection.auto && (
          <div className="bg-red-100 text-red-700 p-4 border-t border-gray-300">
            <div className="flex items-center">
              <span className="mr-2">⚠</span> No Auto Initiated Claims Found.
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TrackClaimStatus;
